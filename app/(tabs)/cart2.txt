import { Pressable, ScrollView, StyleSheet, Text, View } from 'react-native'
import { useLocalSearchParams } from 'expo-router'
import React, { useState, useEffect } from 'react'
import AsyncStorage from '@react-native-async-storage/async-storage'

const cart = () => {

    // const cartItems = [{
    //     id: 1,
    //     name: 'Coca-Cola',
    //     price: 10,
    //     quantity: 2,
    // }, {
    //     id: 2,
    //     name: 'Papas fritas',
    //     price: 15,
    //     quantity: 1,
    // }, {
    //     id: 3,
    //     name: 'Hamburguesa',
    //     price: 20,
    //     quantity: 1,
    // }]
    const [cartItems, setCartItems] = useState([]);
    const { item, quant, value } = useLocalSearchParams();

    useEffect(() => {
        const loadCartItems = async () => {
            try {
                const storedItems = await AsyncStorage.getItem('cartItems');
                if (storedItems !== null) {
                    setCartItems(JSON.parse(storedItems));
                }
            } catch (error) {
                console.error('Error al cargar el carrito:', error);
            }
        };

        loadCartItems();
    }, []);

    useEffect(() => {
        console.log("Prueba")
        console.log(item, quant, value);
        const addItemToCart = async () => {
            // if (item && value) {
            const newItem = {
                id: cartItems.length + 1,
                name: item,
                price: Number(value),
                quantity: Number(quant) || 1
            };

            let updatedCart;
            const existingItemIndex = cartItems.findIndex(i => i.name === newItem.name);

            if (existingItemIndex !== -1) {
                updatedCart = [...cartItems];
                updatedCart[existingItemIndex].quantity += newItem.quantity;
            }
            else {
                updatedCart = [...cartItems, newItem];
            }

            setCartItems(updatedCart);
            try {
                await AsyncStorage.setItem('cartItems', JSON.stringify(updatedCart));
            }
            catch (error) {
                console.log("Error al guardar el carrito: ", error);
            }
            // }
        }
        if (item && value) {
            addItemToCart();
        }
    }, [item, value, quant]);

    return (
        <ScrollView>
            <View className='flex flex-col  items-center'>
                <View className='flex flex-row w-11/12 b rounded-lg my-2'>
                    <Text className='text-lg font-bold w-1/2 flex-1'>Art√≠culo</Text>
                    <Text className='text-lg font-bold w-1/2 flex-1 text-center'>Cantidad</Text>
                    <Text className=' text-lg font-bold w-1/2 flex-1 text-right'>Total</Text>
                </View>
                {cartItems.map((item) => {
                    return (

                        <View className='flex flex-row w-11/12 border-b rounded-lg my-2' key={item.id}>
                            <Text className='text-lg text-left font-bold w-1/2 flex-1'>{item.name}</Text>
                            <Text className='text-lg font-bold w-1/2 flex-1 text-center'>x{item.quantity}</Text>
                            <Text className=' text-lg font-bold w-1/2 flex-1 text-right'>${item.price * item.quantity}</Text>
                        </View>
                    )
                })}
                <View className='flex flex-row w-11/12 border-b rounded-lg my-2'>
                    <Text className='text-lg font-bold w-1/2 flex-1'>Total</Text>
                    <Text className='text-lg font-bold w-1/2 flex-1 text-center'> </Text>
                    <Text className=' text-lg font-bold w-1/2 flex-1 text-right'>${cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0)}</Text>
                </View>

            </View>
            <View>
                <View className=' flex justify-content-center mx-5 ' >
                    <Pressable className='bg-black flex-1  rounded-lg my-2'>
                        <Text className='text-2xl text-white text-center m-3 font-bold'>Pagar</Text>
                    </Pressable>
                </View>
            </View>
        </ScrollView>
    )
}

export default cart

const styles = StyleSheet.create({})